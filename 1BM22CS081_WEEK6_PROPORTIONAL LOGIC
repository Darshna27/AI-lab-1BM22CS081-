# Truth values for variables p, q, r
combinations = [
    (True, True, True), (True, True, False), 
    (True, False, True), (True, False, False), 
    (False, True, True), (False, True, False), 
    (False, False, True), (False, False, False)
]
variable = {'p': 0, 'q': 1, 'r': 2}  # Mapping of variables to indexes
kb = ''  # Knowledge Base
q = ''   # Query
priority = {'~': 3, 'v': 1, '^': 2}  # Operator priority

def input_rules():
    global kb, q
    kb = input("Enter rule: ")
    q = input("Enter the Query: ")

def entailment():
    global kb, q
    print('*' * 10 + " Truth Table Reference " + '*' * 10)
    print('kb', 'alpha')
    print('*' * 10)
    for comb in combinations:
        try:
            s = evaluatePostfix(toPostfix(kb), comb)
            f = evaluatePostfix(toPostfix(q), comb)
            print(s, f)
            print('-' * 10)
            if s and not f:
                return False
        except ValueError as e:
            print("Error in evaluation:", e)
            return False
    return True

def isOperand(c):
    return c.isalpha() and c != 'v'

def isLeftParenthesis(c):
    return c == '('

def isRightParenthesis(c):
    return c == ')'

def isEmpty(stack):
    return len(stack) == 0

def peek(stack):
    return stack[-1]

def hasLessOrEqualPriority(c1, c2):
    if c1 not in priority or c2 not in priority:
        return False
    return priority[c1] <= priority[c2]

def toPostfix(infix):
    stack = []
    postfix = ''
    for c in infix:
        if c == ' ':  # Ignore spaces
            continue
        if isOperand(c):
            postfix += c
        elif isLeftParenthesis(c):
            stack.append(c)
        elif isRightParenthesis(c):
            while stack and not isLeftParenthesis(peek(stack)):
                postfix += stack.pop()
            stack.pop()  # Pop the '('
        else:
            while (not isEmpty(stack)) and hasLessOrEqualPriority(c, peek(stack)):
                postfix += stack.pop()
            stack.append(c)
    while not isEmpty(stack):
        postfix += stack.pop()
    return postfix

def evaluatePostfix(exp, comb):
    stack = []
    for i in exp:
        if i == ' ':  # Ignore spaces
            continue
        if isOperand(i):
            stack.append(comb[variable[i]])
        elif i == '~':
            if not stack:
                raise ValueError("Invalid expression: missing operand for NOT operator")
            val1 = stack.pop()
            stack.append(not val1)
        else:
            if len(stack) < 2:
                raise ValueError("Invalid expression: missing operands for binary operator")
            val1 = stack.pop()
            val2 = stack.pop()
            stack.append(_eval(i, val2, val1))
    if len(stack) != 1:
        raise ValueError("Invalid expression: too many operands")
    return stack.pop()

def _eval(i, val1, val2):
    if i == '^':
        return val2 and val1
    elif i == 'v':
        return val2 or val1
    else:
        raise ValueError(f"Unknown operator: {i}")

# Main execution flow
input_rules()
ans = entailment()
if ans:
    print("The Knowledge Base entails the query")
else:
    print("The Knowledge Base does not entail the query")
     
